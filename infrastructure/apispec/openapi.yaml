openapi: 3.0.0
servers: []
info:
  description: Retrive Products and SKUs
  version: "1.0.0"
  title: Data Mapping Service
  contact:
    email: muhamed.hamzic@stu.ibu.edu.ba
tags:
  - name: developers
    description: Operations available to regular developers
paths:
  /{productId}/{skuNumber}:
    get:
      tags:
        - developers
      summary: gets product information for given ProductID and skuNumber
      operationId: "getSkuPrice"
      description: By passing in a product id and the sku number receive product and sku information
      x-amazon-apigateway-auth:
        type: AWS_IAM
      parameters:
        - name: "productId"
          in: "path"
          description: "the Productid that you want product information for"
          required: true
          schema:
            type: "string"
            format: "int64"
        - name: "skuNumber"
          in: "path"
          description: "the skuNumber that you want prices for"
          required: true
          schema:
            type: "string"
      responses:
        "404":
          description: "when there are no product information for the product sku combination"
        "200":
          description: "product information matching the criteria"
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/AllResponseType"
        "400":
          description: bad input parameter
        "401":
          description: not authorized
        "500":
          description: internal error
      x-amazon-apigateway-integration:
        credentials: ${API_GATEWAY_ROLE_ARN}
        httpMethod: "POST"
        timeoutInMillis: ${READ_TIMEOUT}
        uri: arn:aws:apigateway:$${AWS::Region}:dynamodb:action/Query
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\r\n #if($input.path('$.Count') != 0)\r\n 
              {\r\n 
              \"data\": {\r\n 
              \"type\": \"ProductInformation\",\r\n 
              \"id\": \"$inputRoot.Items[0].ProductID.S\",\r\n 
              \"attributes\": {\r\n 
              \"SKUInformation\": {\r\n \r\n 
              \"productId\": \"$inputRoot.Items[0].ProductID.S\",\r\n 
              \"skuNumber\": \"$inputRoot.Items[0].SKUNumber.S\",\r\n 
              \"SKUDetails\": {\r\n\t #if($inputRoot.Items[0].data.M.SKUName.S.toString() != \"\")\r\n\t\t 
              \"skuName\": \"$inputRoot.Items[0].data.M.SKUName.S\"\r\n\t #end\r\n\t 
              #if($inputRoot.Items[0].data.M.SKUDescription.S.toString() != \"\")\r\n\t\t,\r\n\t\t 
              \"skuDescription\": \"$inputRoot.Items[0].data.M.SKUDescription.S\"\r\n\t 
              #end\r\n\t
              #if($inputRoot.Items[0].data.M.SKUInventory.S.toString() != \"\")\r\n\t\t,\r\n\t\t 
              \"inventoryStatus\": \"$inputRoot.Items[0].data.M.SKUInventory.S\"\r\n\t 
              #end\r\n\t\t 
              #if($inputRoot.Items[0].data.M.SKUPrices.L != \"\")\r\n\t\t,\r\n\t\t 
              #set($skuPrices = $inputRoot.Items[0].data.M.get(\"SKUPrices\").L)\r\n\t\t 
              #foreach($skuPrice in $skuPrices)\r\n\t\t 
              \"skuPrice\" : {\r\n\t\t\t\r\n\t\t\t\t
              \"currencyCode\": \"$skuPrice.M.CurrencyCode.L[0].S\",\r\n\t\t\t\r\n\t\t\t
              #if($skuPrice.M.OnSaleDate.L[0].S.toString() == \"\")\r\n\t\t\t\t
              \"onSaleDate\": \"\",\r\n\t\t\t
              #end \r\n\t\t\t
              #if($skuPrice.M.OnSaleDate.L[0].S.toString() != \"\")\r\n\t\t\t\t
              \"onSaleDate\": $skuPrice.M.OnSaleDate.L[0].S,\r\n\t\t\t
              #end\r\n\t\t\t 
              \"amount\": $skuPrice.M.Amount.L[0].S,\r\n\t\t\t
              #if($skuPrice.M.OffSaleDate.L[0].S.toString() != \"\")\r\n\t\t\t\t
              \"offSaleDate\": $skuPrice.M.OnSaleDate.L[0].S,\r\n\t\t\t
              #end\r\n\t\t\t
              #if($skuPrice.M.OffSaleDate.L[0].S.toString() == \"\")\r\n\t\t\t\t
              \"offSaleDate\": \"\"\r\n\t\t\t#end\r\n\t\t }\r\n\t\t 
              #end\r\n\t 
              #end\r\n }\r\n  \r\n }\r\n }\r\n }\r\n }\r\n 
              #set($context.responseOverride.status = 200)\r\n #else\r\n #set($context.responseOverride.status = 404)\r\n #end\r\n \r\n "
        requestTemplates:
          application/json: "{\r\n   
            \"TableName\": \"${DYNAMO_PRODUCT_TABLE}\",\r\n   
            \"KeyConditionExpression\": \"ProductID = :productId AND SKUNumber = :skuNumber\",\r\n   
            \"ExpressionAttributeValues\": {\r\n      
              \":productId\": {\"S\": \"$input.params('productId')\"},\r\n      
              \":skuNumber\": {\"S\": \"SKUNUMBER#$input.params('skuNumber')\"}\r\n   
            }\r\n}"
        passthroughBehavior: "when_no_templates"
        type: "aws"
components:
  schemas:
    AllResponseType:
      required:
        - "data"
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/AllData"
    AllData:
      required:
        - "attributes"
        - "id"
        - "type"
      type: "object"
      properties:
        type:
          type: "string"
          enum:
            - "ProductInformation"
          example: ProductInformation
        id:
          type: "string"
          example: 1600581881
          description: "This is the product id"
        attributes:
          properties:
            SKUInformation:
              $ref: "#/components/schemas/SKUInformationSummary"
    SKUInformationSummary:
      type: "object"
      required:
        - "productId"
        - "skuNumber"
      properties:
        productId:
          type: "string"
        skuNumber:
          type: "string"
        SKUDetails:
          $ref: "#/components/schemas/SKUDetails"
    SKUDetails:
      type: "object"
      required:
        - "skuName"
        - "skuDescription"
        - "skuPrice"
        - "skuImages"
        - "inventoryStatus"
      properties:
        skuName:
          type: "string"
        skuDescription:
          type: "string"
        skuPrice:
          $ref: "#/components/schemas/SkuPrice"
        skuImages:
          $ref: "#/components/schemas/SkuImages"
        inventoryStatus:
          type: "string"
    SkuPrice:
      type: "object"
      properties:
        amount:
          type: "number"
        currencyCode:
          type: "string"
          enum:
            - "£"
            - "€"
        onSaleDate:
          type: "string"
          format: "date-time"
        offSaleDate: 
          type: "string"
          format: "date-time"
    SkuImages:
      type: "array"
      items:
        type: "string"
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: basic
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseParameters:
      gatewayresponse.header.x-correlation-id: "method.request.header.x-correlation-id"
    responseTemplates:
      application/json: '{ "errors" : [ { "code" : "BAD_REQUEST", "title": "$context.error.message", "detail" : "$context.error.validationErrorString", "meta": { "correlationId": "Please check the correlation id in the response header" }, "status": 400 } ] }'
  BAD_REQUEST_PARAMETERS:
    statusCode: 400
    responseParameters:
      gatewayresponse.header.x-correlation-id: "method.request.header.x-correlation-id"
    responseTemplates:
      application/json: '{ "errors" : [ { "code" : "BAD_REQUEST", "title": "$context.error.message", "detail" : "$context.error.validationErrorString", "meta": { "correlationId": "Please check the correlation id in the response header" }, "status": 400 } ] }'
  DEFAULT_4XX:
    statusCode: 400
    responseParameters:
      gatewayresponse.header.x-correlation-id: "method.request.header.x-correlation-id"
    responseTemplates:
      application/json: '{ "errors" : [ { "code" : "BAD_REQUEST", "title": "$context.error.message", "detail" : "$context.error.validationErrorString", "meta": { "correlationId": "Please check the correlation id in the response header" }, "status": 400 } ] }'
  ACCESS_DENIED:
    statusCode: 403
    responseParameters:
      gatewayresponse.header.x-correlation-id: "method.request.header.x-correlation-id"
    responseTemplates:
      application/json: '{ "errors" : [ { "code" : "ACCESS_DENIED", "title": "$context.error.message", "detail" : "$context.error.validationErrorString", "meta": { "correlationId": "Please check the correlation id in the response header" }, "status": 403 } ] }'
  UNAUTHORIZED:
    statusCode: 401
    responseParameters:
      gatewayresponse.header.x-correlation-id: "method.request.header.x-correlation-id"
    responseTemplates:
      application/json: '{ "errors" : [ { "code" : "UNAUTHORIZED", "title": "$context.error.message", "detail" : "$context.error.validationErrorString", "meta": { "correlationId": "Please check the correlation id in the response header" }, "status": 401 } ] }'
  RESOURCE_NOT_FOUND:
    statusCode: 404
    responseParameters:
      gatewayresponse.header.x-correlation-id: "method.request.header.x-correlation-id"
    responseTemplates:
      application/json: '{ "errors" : [ { "code" : "RESOURCE_NOT_FOUND", "title": "$context.error.message", "detail" : "$context.error.validationErrorString", "meta": { "correlationId": "Please check the correlation id in the response header" }, "status": 401 } ] }'
